classdef testUnpack < matlab.unittest.TestCase

    properties (TestParameter)
        params = { ...
            struct( ...
            'fc', 10e3, ...
            'R', 4e3, ...
            'fs_delay', 8e3, ...
            'fs_time', 20, ...
            'channel_time', 5, ...
            'Tmp', 10e-3, ...
            'n_path', 8, ...
            'coeff', 1, ...
            'f_resamp', 1/(1 - 1.5 / 1545), ...
            'theta_hat_only', true), ...
            struct( ...
            'fc', 15e3, ...
            'R', 8e3, ...
            'fs_delay', 16e3, ...
            'fs_time', 20, ...
            'channel_time', 5, ...
            'Tmp', 20e-3, ...
            'n_path', 10, ...
            'coeff', 1, ...
            'f_resamp', 1/(1 - 0 / 1545), ...
            'theta_hat_only', true), ...
            struct( ...
            'fc', 15e3, ...
            'R', 4e3, ...
            'fs_delay', 8e3, ...
            'fs_time', 10, ...
            'channel_time', 5, ...
            'Tmp', 20e-3, ...
            'n_path', 6, ...
            'coeff', 1, ...
            'f_resamp', 1/(1 + 2 / 1545), ...
            'theta_hat_only', false), ...
            };

    end

    methods (TestMethodSetup)
        function setRandomSeed(~)
            rng(1994);
        end
    end

    methods (Test)

        function testUnpackFunction(~, params)
            % close all;

            %% Random channel
            path_delay = [0, randsamples(pi/3:params.Tmp*1e3, params.n_path-1)].' / 1e3;
            path_delay = path_delay - min(path_delay);
            path_gain = exp(-path_delay*params.coeff./params.Tmp);
            c_p = path_gain .* exp(-1j*2*pi*(params.fc)*path_delay);

            %% Populate the channel matrix
            h_hat = zeros(ceil(params.fs_delay*params.Tmp*1.5), 1, round(params.channel_time*params.fs_time));
            h_hat(round((path_delay + 0.2 * params.Tmp)*params.fs_delay), 1, :) = repmat(c_p, 1, size(h_hat, 3));
            a = 1 - 1 / params.f_resamp;
            t = 1:round(params.channel_time*params.fs_delay);
            theta_hat = -a * 2 * pi * params.fc * t / params.fs_delay;

            channel = struct;
            channel.h_hat = h_hat;
            channel.params.fs_delay = params.fs_delay;
            channel.params.fs_time = params.fs_time;
            channel.params.fc = params.fc;
            channel.version = 1.0;
            channel.theta_hat = theta_hat;

            % If there is additional parameter to resample
            if ~params.theta_hat_only
                % We set the residual theta_hat to zero
                channel.theta_hat = zeros(size(channel.theta_hat));
                channel.f_resamp = params.f_resamp;
            end

            fs_delay = params.fs_delay;
            fs_time = params.fs_delay * 0.01;
            array_index = 1;
            unpacked = unpack(fs_time, array_index, channel, 0.3, 0.3);

            delay_axis = (0:size(unpacked, 1) - 1) ./ fs_delay;
            time_axis = (0:size(unpacked, 3) - 1) ./ fs_time;

            figure
            imagesc(delay_axis*1e3, time_axis, 20*log10(squeeze(abs(unpacked(:, 1, :))).'), [-30, 0])
            xlabel('Delay [ms]')
            ylabel('Time [s]')

        end

    end
end
function samples = randsamples(population, num)
rand_index = randperm(length(population));
samples = population(rand_index(1:num));
end
